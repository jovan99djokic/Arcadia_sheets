{"version":3,"sources":["Div1.png","Div2.png","Pages/Division1.js","Pages/Division2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Division1","useState","data","setData","useEffect","fetch","then","resp","json","console","log","className","title","results","columns","field","defaultFilter","options","toolbar","headerStyle","backgroundColor","color","paging","search","pageSize","emptyRowsWhenPaging","style","Division2","App","to","src","Div1","alt","Div2","path","component","division1","division2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdb6fbdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Div1.80074226.png\";","module.exports = __webpack_public_path__ + \"static/media/Div2.c7a237da.png\";","import React, { useState, useEffect } from 'react';\nimport '../App.css'\nimport MaterialTable from 'material-table'\n\n\nfunction Division1() {\n\n  const [data, setData] = useState([])\n  const columns = [\n    { title: \"Name\", field: \"name\" },\n    { title: \"Division\", field: \"secondaryGroups.0.name\",defaultFilter: \"Division 1\" },\n    { title: \"Time Zone\", field: \"timeZone\" },\n    { title: \"Primary Group\", field: \"primaryGroup.name\"},\n    { title: \"Reputation Points\", field: \"reputationPoints\" },\n    { title: \"Posts\", field: \"posts\" },\n    { title: \"Last Visit\", field: \"lastVisit\" },\n    { title: \"Rank\", field: \"rank\" },\n    { title: \"Achievement Points\", field: \"achievements_points\" },\n  ]\n  useEffect(() => {\n    fetch(\"/api/core/members?key=d89ae9a6e3ace7714983ed652997357b\")\n      .then(resp => resp.json())\n      .then(resp => {\n        console.log(resp);\n        setData(resp)\n      })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <MaterialTable\n        title=\"Division 1\"\n        data={data.results}\n        columns={columns}\n        options={{\n          toolbar:false ,\n          headerStyle: {\n            backgroundColor: \"#CC0000\",\n            color: 'white'\n        },\n          paging:false,\n          search: false,\n          pageSize:50,       // make initial page size\n          emptyRowsWhenPaging: false,   // To avoid of having empty rows\n        }}\n      \n        style={{ backgroundColor: '#282c34',\n        color: 'white'\n      }}\n      />\n    </div>\n  );\n}\n\nexport default Division1;\n","import React, { useState, useEffect } from 'react';\nimport '../App.css'\nimport MaterialTable from 'material-table'\n\n\nfunction Division2() {\n\n  const [data, setData] = useState([])\n  const columns = [\n    { title: \"Name\", field: \"name\" },\n    { title: \"Division\", field: \"secondaryGroups.0.name\",defaultFilter: \"Division 2\" },\n    { title: \"Time Zone\", field: \"timeZone\" },\n    { title: \"Primary Group\", field: \"primaryGroup.name\"},\n    { title: \"Reputation Points\", field: \"reputationPoints\" },\n    { title: \"Posts\", field: \"posts\" },\n    { title: \"Last Visit\", field: \"lastVisit\" },\n    { title: \"Rank\", field: \"rank\" },\n    { title: \"Achievement Points\", field: \"achievements_points\" },\n  ]\n  useEffect(() => {\n    fetch(\"/api/core/members?key=d89ae9a6e3ace7714983ed652997357b\")\n      .then(resp => resp.json())\n      .then(resp => {\n        console.log(resp);\n        setData(resp)\n      })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <MaterialTable\n        title=\"Division 2\"\n        data={data.results}\n        columns={columns}\n        options={{\n          toolbar:false ,\n          headerStyle: {\n            backgroundColor: \"#CC0000\",\n            color: 'white'\n        },\n          paging:false,\n          search: false,\n          pageSize:50,      \n          emptyRowsWhenPaging: false,  \n        }}\n      \n        style={{ backgroundColor: '#282c34',\n        color: 'white'\n      }}\n      />\n    </div>\n  );\n}\n\nexport default Division2;\n","import React from \"react\";\nimport './App.css';\nimport Div1 from './Div1.png';\nimport Div2 from './Div2.png';\nimport Division1 from './Pages/Division1.js'\nimport Division2 from './Pages/Division2.js'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n            <Link to=\"/Division1\">\n           <img src={Div1} className=\"Icon\" alt=\"Icon\" />\n            </Link>\n\n          <Link to=\"/Division2\">\n           <img src={Div2} className=\"Icon\" alt=\"Icon\"/>\n            </Link>\n\n        <Switch>\n          <Route path=\"/Division1\" component={division1}></Route>\n          <Route path=\"/Division2\" component={division2}></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction division1() {\n  return (\n    <div className=\"App\">\n      <Division1></Division1>\n    </div>\n  );\n}\n\n\nfunction division2() {\n  return (\n    <div className=\"App\">\n      <Division2></Division2>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}